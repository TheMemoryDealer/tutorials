
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "beginner/introyt/trainingyt.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_beginner_introyt_trainingyt.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_introyt_trainingyt.py:


`Introduction <introyt1_tutorial.html>`_ ||
`Tensors <tensors_deeper_tutorial.html>`_ ||
`Autograd <autogradyt_tutorial.html>`_ ||
`Building Models <modelsyt_tutorial.html>`_ ||
`TensorBoard Support <tensorboardyt_tutorial.html>`_ ||
**Training Models** ||
`Model Understanding <captumyt.html>`_

Training with PyTorch
=====================

Follow along with the video below or on `youtube <https://www.youtube.com/watch?v=jF43_wj_DCQ>`__.

.. raw:: html

   <div style="margin-top:10px; margin-bottom:10px;">
     <iframe width="560" height="315" src="https://www.youtube.com/embed/jF43_wj_DCQ" frameborder="0" allow="accelerometer; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
   </div>

Introduction
------------

In past videos, we’ve discussed and demonstrated:

- Building models with the neural network layers and functions of the torch.nn module
- The mechanics of automated gradient computation, which is central to
  gradient-based model training 
- Using TensorBoard to visualize training progress and other activities

In this video, we’ll be adding some new tools to your inventory:

- We’ll get familiar with the dataset and dataloader abstractions, and how
  they ease the process of feeding data to your model during a training loop 
- We’ll discuss specific loss functions and when to use them
- We’ll look at PyTorch optimizers, which implement algorithms to adjust
  model weights based on the outcome of a loss function

Finally, we’ll pull all of these together and see a full PyTorch
training loop in action.


Dataset and DataLoader
----------------------
 
The ``Dataset`` and ``DataLoader`` classes encapsulate the process of
pulling your data from storage and exposing it to your training loop in
batches.

The ``Dataset`` is responsible for accessing and processing single
instances of data.
 
The ``DataLoader`` pulls instances of data from the ``Dataset`` (either
automatically or with a sampler that you define), collects them in
batches, and returns them for consumption by your training loop. The
``DataLoader`` works with all kinds of datasets, regardless of the type
of data they contain.
 
For this tutorial, we’ll be using the Fashion-MNIST dataset provided by
TorchVision. We use ``torchvision.transforms.Normalize()`` to
zero-center and normalize the distribution of the image tile content,
and download both training and validation data splits.

.. GENERATED FROM PYTHON SOURCE LINES 65-96

.. code-block:: default


    import torch
    import torchvision
    import torchvision.transforms as transforms

    # PyTorch TensorBoard support
    from torch.utils.tensorboard import SummaryWriter
    from datetime import datetime


    transform = transforms.Compose(
        [transforms.ToTensor(),
        transforms.Normalize((0.5,), (0.5,))])

    # Create datasets for training & validation, download if necessary
    training_set = torchvision.datasets.FashionMNIST('./data', train=True, transform=transform, download=True)
    validation_set = torchvision.datasets.FashionMNIST('./data', train=False, transform=transform, download=True)

    # Create data loaders for our datasets; shuffle for training, not for validation
    training_loader = torch.utils.data.DataLoader(training_set, batch_size=4, shuffle=True)
    validation_loader = torch.utils.data.DataLoader(validation_set, batch_size=4, shuffle=False)

    # Class labels
    classes = ('T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
            'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle Boot')

    # Report split sizes
    print('Training set has {} instances'.format(len(training_set)))
    print('Validation set has {} instances'.format(len(validation_set)))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-images-idx3-ubyte.gz to ./data/FashionMNIST/raw/train-images-idx3-ubyte.gz

      0%|          | 0/26421880 [00:00<?, ?it/s]
      0%|          | 32768/26421880 [00:00<01:27, 301385.35it/s]
      0%|          | 65536/26421880 [00:00<01:27, 300333.54it/s]
      0%|          | 131072/26421880 [00:00<01:00, 436773.55it/s]
      1%|          | 229376/26421880 [00:00<00:42, 618975.49it/s]
      2%|1         | 425984/26421880 [00:00<00:24, 1043028.37it/s]
      2%|2         | 557056/26421880 [00:00<00:24, 1047471.58it/s]
      3%|2         | 688128/26421880 [00:00<00:29, 859349.11it/s] 
      3%|2         | 786432/26421880 [00:00<00:29, 869569.01it/s]
      3%|3         | 917504/26421880 [00:01<00:26, 957876.31it/s]
      4%|3         | 1048576/26421880 [00:01<00:24, 1023668.44it/s]
      4%|4         | 1179648/26421880 [00:01<00:23, 1072750.35it/s]
      5%|4         | 1310720/26421880 [00:01<00:22, 1106627.48it/s]
      5%|5         | 1441792/26421880 [00:01<00:22, 1132367.54it/s]
      6%|5         | 1572864/26421880 [00:01<00:21, 1150931.60it/s]
      6%|6         | 1703936/26421880 [00:01<00:21, 1163965.56it/s]
      7%|6         | 1835008/26421880 [00:01<00:20, 1174659.40it/s]
      7%|7         | 1966080/26421880 [00:01<00:20, 1180882.44it/s]
      8%|7         | 2097152/26421880 [00:02<00:20, 1184621.49it/s]
      8%|8         | 2228224/26421880 [00:02<00:20, 1189120.53it/s]
      9%|8         | 2359296/26421880 [00:02<00:20, 1192122.33it/s]
      9%|9         | 2490368/26421880 [00:02<00:20, 1194312.41it/s]
     10%|9         | 2621440/26421880 [00:02<00:19, 1195972.66it/s]
     10%|#         | 2752512/26421880 [00:02<00:19, 1197043.47it/s]
     11%|#         | 2883584/26421880 [00:02<00:19, 1197872.86it/s]
     11%|#1        | 3014656/26421880 [00:02<00:19, 1198678.18it/s]
     12%|#1        | 3145728/26421880 [00:02<00:19, 1199163.88it/s]
     12%|#2        | 3276800/26421880 [00:03<00:19, 1199573.15it/s]
     13%|#2        | 3407872/26421880 [00:03<00:19, 1201079.66it/s]
     13%|#3        | 3538944/26421880 [00:03<00:19, 1199219.84it/s]
     14%|#3        | 3670016/26421880 [00:03<00:19, 1193746.30it/s]
     14%|#4        | 3801088/26421880 [00:03<00:18, 1195848.04it/s]
     15%|#4        | 3932160/26421880 [00:03<00:18, 1197047.51it/s]
     15%|#5        | 4063232/26421880 [00:03<00:18, 1199355.46it/s]
     16%|#5        | 4194304/26421880 [00:03<00:18, 1199675.85it/s]
     16%|#6        | 4325376/26421880 [00:03<00:18, 1199595.46it/s]
     17%|#6        | 4456448/26421880 [00:04<00:18, 1199727.67it/s]
     17%|#7        | 4587520/26421880 [00:04<00:18, 1199904.29it/s]
     18%|#7        | 4718592/26421880 [00:04<00:18, 1200101.83it/s]
     18%|#8        | 4849664/26421880 [00:04<00:17, 1200235.44it/s]
     19%|#8        | 4980736/26421880 [00:04<00:17, 1200352.56it/s]
     19%|#9        | 5111808/26421880 [00:04<00:17, 1200606.02it/s]
     20%|#9        | 5242880/26421880 [00:04<00:17, 1200912.55it/s]
     20%|##        | 5373952/26421880 [00:04<00:17, 1201183.91it/s]
     21%|##        | 5505024/26421880 [00:04<00:17, 1205149.72it/s]
     21%|##1       | 5636096/26421880 [00:05<00:17, 1203711.52it/s]
     22%|##1       | 5767168/26421880 [00:05<00:17, 1202537.92it/s]
     22%|##2       | 5898240/26421880 [00:05<00:17, 1202260.19it/s]
     23%|##2       | 6062080/26421880 [00:05<00:15, 1288493.45it/s]
     23%|##3       | 6193152/26421880 [00:05<00:16, 1262532.03it/s]
     24%|##3       | 6324224/26421880 [00:05<00:16, 1244132.28it/s]
     25%|##4       | 6488064/26421880 [00:05<00:15, 1317985.28it/s]
     25%|##5       | 6651904/26421880 [00:05<00:14, 1368705.36it/s]
     26%|##5       | 6815744/26421880 [00:05<00:13, 1404568.41it/s]
     26%|##6       | 6979584/26421880 [00:06<00:13, 1389778.00it/s]
     27%|##7       | 7143424/26421880 [00:06<00:13, 1420186.21it/s]
     28%|##7       | 7307264/26421880 [00:06<00:13, 1441404.45it/s]
     28%|##8       | 7471104/26421880 [00:06<00:13, 1456537.90it/s]
     29%|##8       | 7634944/26421880 [00:06<00:16, 1169191.82it/s]
     30%|##9       | 7798784/26421880 [00:06<00:14, 1251771.90it/s]
     30%|###       | 7962624/26421880 [00:06<00:14, 1315962.40it/s]
     31%|###       | 8126464/26421880 [00:06<00:13, 1364684.21it/s]
     31%|###1      | 8290304/26421880 [00:07<00:12, 1400683.27it/s]
     32%|###1      | 8454144/26421880 [00:07<00:12, 1425996.41it/s]
     33%|###2      | 8617984/26421880 [00:07<00:12, 1438414.61it/s]
     33%|###3      | 8781824/26421880 [00:07<00:12, 1422339.52it/s]
     34%|###3      | 8945664/26421880 [00:07<00:12, 1442276.04it/s]
     34%|###4      | 9109504/26421880 [00:07<00:11, 1456542.02it/s]
     35%|###5      | 9273344/26421880 [00:07<00:11, 1469310.47it/s]
     36%|###5      | 9437184/26421880 [00:07<00:11, 1478220.25it/s]
     36%|###6      | 9601024/26421880 [00:07<00:11, 1484696.87it/s]
     37%|###6      | 9764864/26421880 [00:07<00:11, 1489067.38it/s]
     38%|###7      | 9928704/26421880 [00:08<00:11, 1492826.50it/s]
     38%|###8      | 10092544/26421880 [00:08<00:10, 1495276.75it/s]
     39%|###8      | 10256384/26421880 [00:08<00:10, 1500321.63it/s]
     40%|###9      | 10452992/26421880 [00:08<00:10, 1583579.86it/s]
     40%|####      | 10616832/26421880 [00:08<00:10, 1562400.17it/s]
     41%|####      | 10813440/26421880 [00:08<00:09, 1629561.78it/s]
     42%|####1     | 10977280/26421880 [00:08<00:09, 1631450.58it/s]
     42%|####2     | 11141120/26421880 [00:08<00:09, 1608461.08it/s]
     43%|####2     | 11304960/26421880 [00:08<00:09, 1575129.03it/s]
     43%|####3     | 11468800/26421880 [00:09<00:09, 1553179.60it/s]
     44%|####4     | 11665408/26421880 [00:09<00:09, 1627002.20it/s]
     45%|####5     | 11894784/26421880 [00:09<00:08, 1766389.07it/s]
     46%|####5     | 12091392/26421880 [00:09<00:08, 1778316.64it/s]
     47%|####6     | 12320768/26421880 [00:09<00:07, 1872066.82it/s]
     47%|####7     | 12517376/26421880 [00:09<00:07, 1851951.51it/s]
     48%|####8     | 12746752/26421880 [00:09<00:07, 1925460.73it/s]
     49%|####9     | 13008896/26421880 [00:09<00:06, 2064624.99it/s]
     50%|#####     | 13238272/26421880 [00:09<00:06, 2077222.86it/s]
     51%|#####     | 13467648/26421880 [00:10<00:06, 2083506.73it/s]
     52%|#####1    | 13729792/26421880 [00:10<00:05, 2177754.94it/s]
     53%|#####2    | 13991936/26421880 [00:10<00:05, 2243052.02it/s]
     54%|#####3    | 14254080/26421880 [00:10<00:05, 2285331.27it/s]
     55%|#####5    | 14548992/26421880 [00:10<00:04, 2402741.02it/s]
     56%|#####6    | 14811136/26421880 [00:10<00:04, 2408179.97it/s]
     57%|#####7    | 15106048/26421880 [00:10<00:04, 2491799.85it/s]
     58%|#####8    | 15400960/26421880 [00:10<00:04, 2554734.93it/s]
     60%|#####9    | 15728640/26421880 [00:10<00:03, 2683101.26it/s]
     61%|######    | 16023552/26421880 [00:11<00:03, 2692833.61it/s]
     62%|######1   | 16351232/26421880 [00:11<00:03, 2782551.74it/s]
     63%|######3   | 16678912/26421880 [00:11<00:03, 2849267.30it/s]
     64%|######4   | 17039360/26421880 [00:11<00:03, 2977206.02it/s]
     66%|######5   | 17367040/26421880 [00:11<00:03, 2989738.23it/s]
     67%|######7   | 17760256/26421880 [00:11<00:02, 3165750.08it/s]
     69%|######8   | 18120704/26421880 [00:11<00:02, 3207398.65it/s]
     70%|#######   | 18513920/26421880 [00:11<00:02, 3319511.37it/s]
     72%|#######1  | 18907136/26421880 [00:11<00:02, 3403034.62it/s]
     73%|#######3  | 19300352/26421880 [00:12<00:02, 3465737.96it/s]
     75%|#######4  | 19726336/26421880 [00:12<00:01, 3591204.20it/s]
     76%|#######6  | 20152320/26421880 [00:12<00:01, 3686606.29it/s]
     78%|#######7  | 20578304/26421880 [00:12<00:01, 3747883.50it/s]
     80%|#######9  | 21037056/26421880 [00:12<00:01, 3882592.83it/s]
     81%|########1 | 21528576/26421880 [00:12<00:01, 4060998.26it/s]
     83%|########3 | 21987328/26421880 [00:12<00:01, 4104803.90it/s]
     85%|########5 | 22478848/26421880 [00:12<00:00, 4220328.89it/s]
     87%|########7 | 23003136/26421880 [00:12<00:00, 4383771.86it/s]
     89%|########9 | 23527424/26421880 [00:13<00:00, 4509411.20it/s]
     91%|#########1| 24051712/26421880 [00:13<00:00, 4600023.14it/s]
     93%|#########3| 24608768/26421880 [00:13<00:00, 4745814.07it/s]
     95%|#########5| 25198592/26421880 [00:13<00:00, 4920088.21it/s]
     97%|#########7| 25755648/26421880 [00:13<00:00, 4994097.39it/s]
    100%|#########9| 26378240/26421880 [00:13<00:00, 5188539.35it/s]
    100%|##########| 26421880/26421880 [00:13<00:00, 1947978.98it/s]
    Extracting ./data/FashionMNIST/raw/train-images-idx3-ubyte.gz to ./data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/train-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw/train-labels-idx1-ubyte.gz

      0%|          | 0/29515 [00:00<?, ?it/s]
    100%|##########| 29515/29515 [00:00<00:00, 271225.43it/s]
    100%|##########| 29515/29515 [00:00<00:00, 270019.77it/s]
    Extracting ./data/FashionMNIST/raw/train-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-images-idx3-ubyte.gz to ./data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz

      0%|          | 0/4422102 [00:00<?, ?it/s]
      1%|          | 32768/4422102 [00:00<00:14, 300099.47it/s]
      1%|1         | 65536/4422102 [00:00<00:14, 298705.62it/s]
      3%|2         | 131072/4422102 [00:00<00:09, 434245.04it/s]
      4%|4         | 196608/4422102 [00:00<00:08, 497553.89it/s]
      9%|8         | 393216/4422102 [00:00<00:04, 963635.69it/s]
     11%|#1        | 491520/4422102 [00:00<00:04, 938301.59it/s]
     16%|#6        | 720896/4422102 [00:00<00:02, 1314552.83it/s]
     27%|##7       | 1212416/4422102 [00:00<00:01, 2318632.39it/s]
     51%|#####1    | 2260992/4422102 [00:00<00:00, 4571677.42it/s]
     93%|#########2| 4096000/4422102 [00:01<00:00, 8302820.60it/s]
    100%|##########| 4422102/4422102 [00:01<00:00, 4014176.74it/s]
    Extracting ./data/FashionMNIST/raw/t10k-images-idx3-ubyte.gz to ./data/FashionMNIST/raw

    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz
    Downloading http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/t10k-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz

      0%|          | 0/5148 [00:00<?, ?it/s]
    100%|##########| 5148/5148 [00:00<00:00, 27753569.40it/s]
    Extracting ./data/FashionMNIST/raw/t10k-labels-idx1-ubyte.gz to ./data/FashionMNIST/raw

    Training set has 60000 instances
    Validation set has 10000 instances




.. GENERATED FROM PYTHON SOURCE LINES 97-99

As always, let’s visualize the data as a sanity check:


.. GENERATED FROM PYTHON SOURCE LINES 99-123

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    # Helper function for inline image display
    def matplotlib_imshow(img, one_channel=False):
        if one_channel:
            img = img.mean(dim=0)
        img = img / 2 + 0.5     # unnormalize
        npimg = img.numpy()
        if one_channel:
            plt.imshow(npimg, cmap="Greys")
        else:
            plt.imshow(np.transpose(npimg, (1, 2, 0)))

    dataiter = iter(training_loader)
    images, labels = next(dataiter)

    # Create a grid from the images and show them
    img_grid = torchvision.utils.make_grid(images)
    matplotlib_imshow(img_grid, one_channel=True)
    print('  '.join(classes[labels[j]] for j in range(4)))





.. image-sg:: /beginner/introyt/images/sphx_glr_trainingyt_001.png
   :alt: trainingyt
   :srcset: /beginner/introyt/images/sphx_glr_trainingyt_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Coat  Ankle Boot  Dress  Ankle Boot




.. GENERATED FROM PYTHON SOURCE LINES 124-130

The Model
---------

The model we’ll use in this example is a variant of LeNet-5 - it should
be familiar if you’ve watched the previous videos in this series.


.. GENERATED FROM PYTHON SOURCE LINES 130-158

.. code-block:: default


    import torch.nn as nn
    import torch.nn.functional as F

    # PyTorch models inherit from torch.nn.Module
    class GarmentClassifier(nn.Module):
        def __init__(self):
            super(GarmentClassifier, self).__init__()
            self.conv1 = nn.Conv2d(1, 6, 5)
            self.pool = nn.MaxPool2d(2, 2)
            self.conv2 = nn.Conv2d(6, 16, 5)
            self.fc1 = nn.Linear(16 * 4 * 4, 120)
            self.fc2 = nn.Linear(120, 84)
            self.fc3 = nn.Linear(84, 10)

        def forward(self, x):
            x = self.pool(F.relu(self.conv1(x)))
            x = self.pool(F.relu(self.conv2(x)))
            x = x.view(-1, 16 * 4 * 4)
            x = F.relu(self.fc1(x))
            x = F.relu(self.fc2(x))
            x = self.fc3(x)
            return x
    

    model = GarmentClassifier()









.. GENERATED FROM PYTHON SOURCE LINES 159-166

Loss Function
-------------

For this example, we’ll be using a cross-entropy loss. For demonstration
purposes, we’ll create batches of dummy output and label values, run
them through the loss function, and examine the result.


.. GENERATED FROM PYTHON SOURCE LINES 166-182

.. code-block:: default


    loss_fn = torch.nn.CrossEntropyLoss()

    # NB: Loss functions expect data in batches, so we're creating batches of 4
    # Represents the model's confidence in each of the 10 classes for a given input
    dummy_outputs = torch.rand(4, 10)
    # Represents the correct class among the 10 being tested
    dummy_labels = torch.tensor([1, 5, 3, 7])
    
    print(dummy_outputs)
    print(dummy_labels)

    loss = loss_fn(dummy_outputs, dummy_labels)
    print('Total loss for this batch: {}'.format(loss.item()))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[0.7917, 0.3026, 0.5239, 0.3577, 0.0767, 0.4453, 0.4811, 0.5655, 0.6957,
             0.0710],
            [0.6118, 0.2487, 0.2543, 0.5863, 0.6176, 0.9653, 0.8657, 0.3790, 0.0838,
             0.6466],
            [0.2181, 0.1354, 0.3318, 0.6364, 0.4206, 0.5716, 0.8069, 0.3986, 0.4695,
             0.8933],
            [0.4961, 0.5300, 0.7279, 0.4995, 0.1877, 0.3729, 0.1672, 0.2551, 0.0055,
             0.8694]])
    tensor([1, 5, 3, 7])
    Total loss for this batch: 2.25669264793396




.. GENERATED FROM PYTHON SOURCE LINES 183-200

Optimizer
---------

For this example, we’ll be using simple `stochastic gradient
descent <https://pytorch.org/docs/stable/optim.html>`__ with momentum.

It can be instructive to try some variations on this optimization
scheme:

- Learning rate determines the size of the steps the optimizer
  takes. What does a different learning rate do to the your training
  results, in terms of accuracy and convergence time?
- Momentum nudges the optimizer in the direction of strongest gradient over
  multiple steps. What does changing this value do to your results? 
- Try some different optimization algorithms, such as averaged SGD, Adagrad, or
  Adam. How do your results differ?


.. GENERATED FROM PYTHON SOURCE LINES 200-205

.. code-block:: default


    # Optimizers specified in the torch.optim package
    optimizer = torch.optim.SGD(model.parameters(), lr=0.001, momentum=0.9)









.. GENERATED FROM PYTHON SOURCE LINES 206-225

The Training Loop
-----------------

Below, we have a function that performs one training epoch. It
enumerates data from the DataLoader, and on each pass of the loop does
the following:

- Gets a batch of training data from the DataLoader
- Zeros the optimizer’s gradients 
- Performs an inference - that is, gets predictions from the model for an input batch
- Calculates the loss for that set of predictions vs. the labels on the dataset
- Calculates the backward gradients over the learning weights
- Tells the optimizer to perform one learning step - that is, adjust the model’s
  learning weights based on the observed gradients for this batch, according to the
  optimization algorithm we chose
- It reports on the loss for every 1000 batches.
- Finally, it reports the average per-batch loss for the last
  1000 batches, for comparison with a validation run


.. GENERATED FROM PYTHON SOURCE LINES 225-262

.. code-block:: default


    def train_one_epoch(epoch_index, tb_writer):
        running_loss = 0.
        last_loss = 0.
    
        # Here, we use enumerate(training_loader) instead of
        # iter(training_loader) so that we can track the batch
        # index and do some intra-epoch reporting
        for i, data in enumerate(training_loader):
            # Every data instance is an input + label pair
            inputs, labels = data
        
            # Zero your gradients for every batch!
            optimizer.zero_grad()
        
            # Make predictions for this batch
            outputs = model(inputs)
        
            # Compute the loss and its gradients
            loss = loss_fn(outputs, labels)
            loss.backward()
        
            # Adjust learning weights
            optimizer.step()
        
            # Gather data and report
            running_loss += loss.item()
            if i % 1000 == 999:
                last_loss = running_loss / 1000 # loss per batch
                print('  batch {} loss: {}'.format(i + 1, last_loss))
                tb_x = epoch_index * len(training_loader) + i + 1
                tb_writer.add_scalar('Loss/train', last_loss, tb_x)
                running_loss = 0.
            
        return last_loss









.. GENERATED FROM PYTHON SOURCE LINES 263-276

Per-Epoch Activity
~~~~~~~~~~~~~~~~~~

There are a couple of things we’ll want to do once per epoch: 

- Perform validation by checking our relative loss on a set of data that was not
  used for training, and report this 
- Save a copy of the model

Here, we’ll do our reporting in TensorBoard. This will require going to
the command line to start TensorBoard, and opening it in another browser
tab.


.. GENERATED FROM PYTHON SOURCE LINES 276-322

.. code-block:: default


    # Initializing in a separate cell so we can easily add more epochs to the same run
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    writer = SummaryWriter('runs/fashion_trainer_{}'.format(timestamp))
    epoch_number = 0

    EPOCHS = 5

    best_vloss = 1_000_000.

    for epoch in range(EPOCHS):
        print('EPOCH {}:'.format(epoch_number + 1))
    
        # Make sure gradient tracking is on, and do a pass over the data
        model.train(True)
        avg_loss = train_one_epoch(epoch_number, writer)
    
        # We don't need gradients on to do reporting
        model.train(False)
    
        running_vloss = 0.0
        for i, vdata in enumerate(validation_loader):
            vinputs, vlabels = vdata
            voutputs = model(vinputs)
            vloss = loss_fn(voutputs, vlabels)
            running_vloss += vloss
    
        avg_vloss = running_vloss / (i + 1)
        print('LOSS train {} valid {}'.format(avg_loss, avg_vloss))
    
        # Log the running loss averaged per batch
        # for both training and validation
        writer.add_scalars('Training vs. Validation Loss',
                        { 'Training' : avg_loss, 'Validation' : avg_vloss },
                        epoch_number + 1)
        writer.flush()
    
        # Track best performance, and save the model's state
        if avg_vloss < best_vloss:
            best_vloss = avg_vloss
            model_path = 'model_{}_{}'.format(timestamp, epoch_number)
            torch.save(model.state_dict(), model_path)
    
        epoch_number += 1






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    EPOCH 1:
      batch 1000 loss: 1.897432833880186
      batch 2000 loss: 0.869706356920302
      batch 3000 loss: 0.7164226627554744
      batch 4000 loss: 0.6539750299635343
      batch 5000 loss: 0.590568613669835
      batch 6000 loss: 0.5691057518946473
      batch 7000 loss: 0.5167521300120861
      batch 8000 loss: 0.5172832366582006
      batch 9000 loss: 0.5160391374537722
      batch 10000 loss: 0.4872479235328501
      batch 11000 loss: 0.47688611813727766
      batch 12000 loss: 0.4498267047805712
      batch 13000 loss: 0.4547578685899498
      batch 14000 loss: 0.4124709322960116
      batch 15000 loss: 0.43759004369095783
    LOSS train 0.43759004369095783 valid 0.509929358959198
    EPOCH 2:
      batch 1000 loss: 0.41043629265087656
      batch 2000 loss: 0.40861270017758944
      batch 3000 loss: 0.3900872187930218
      batch 4000 loss: 0.39943036615260646
      batch 5000 loss: 0.4063906288895523
      batch 6000 loss: 0.3670553697405849
      batch 7000 loss: 0.3536676973573631
      batch 8000 loss: 0.37914323002763556
      batch 9000 loss: 0.3667308819255486
      batch 10000 loss: 0.363415189671563
      batch 11000 loss: 0.3555523951793875
      batch 12000 loss: 0.376084866451798
      batch 13000 loss: 0.3477196233471623
      batch 14000 loss: 0.34682492478407223
      batch 15000 loss: 0.3477395316538168
    LOSS train 0.3477395316538168 valid 0.3713844120502472
    EPOCH 3:
      batch 1000 loss: 0.3229177502277598
      batch 2000 loss: 0.3316048461886385
      batch 3000 loss: 0.3442358291876153
      batch 4000 loss: 0.3541799858789018
      batch 5000 loss: 0.3223830099882325
      batch 6000 loss: 0.3445769677386997
      batch 7000 loss: 0.3294010854208318
      batch 8000 loss: 0.3135634684145334
      batch 9000 loss: 0.31340768449527967
      batch 10000 loss: 0.3108917172539077
      batch 11000 loss: 0.30142349575349364
      batch 12000 loss: 0.3185324301788205
      batch 13000 loss: 0.3110550316504159
      batch 14000 loss: 0.31709137561079115
      batch 15000 loss: 0.3276273285203497
    LOSS train 0.3276273285203497 valid 0.3537184000015259
    EPOCH 4:
      batch 1000 loss: 0.29381070897406697
      batch 2000 loss: 0.3035655062991573
      batch 3000 loss: 0.31834062537596763
      batch 4000 loss: 0.2990132515409277
      batch 5000 loss: 0.31711919864195076
      batch 6000 loss: 0.30402463662603985
      batch 7000 loss: 0.29461686899900086
      batch 8000 loss: 0.290231448531682
      batch 9000 loss: 0.29312623360721046
      batch 10000 loss: 0.2757347827550311
      batch 11000 loss: 0.2886228761144266
      batch 12000 loss: 0.29868048911123335
      batch 13000 loss: 0.28433788465235554
      batch 14000 loss: 0.31891740179510086
      batch 15000 loss: 0.29969152424667844
    LOSS train 0.29969152424667844 valid 0.34818321466445923
    EPOCH 5:
      batch 1000 loss: 0.2773634261221814
      batch 2000 loss: 0.26882841392546836
      batch 3000 loss: 0.2843380004544306
      batch 4000 loss: 0.27353332139230496
      batch 5000 loss: 0.26811142738012134
      batch 6000 loss: 0.30348933878406387
      batch 7000 loss: 0.2801161587318129
      batch 8000 loss: 0.2831396900442496
      batch 9000 loss: 0.26604254959885293
      batch 10000 loss: 0.26184681350448225
      batch 11000 loss: 0.27826030088722475
      batch 12000 loss: 0.2761149971394952
      batch 13000 loss: 0.30940683764834104
      batch 14000 loss: 0.27671428243424046
      batch 15000 loss: 0.28156038235461894
    LOSS train 0.28156038235461894 valid 0.34397995471954346




.. GENERATED FROM PYTHON SOURCE LINES 323-365

To load a saved version of the model:

.. code:: python

    saved_model = GarmentClassifier()
    saved_model.load_state_dict(torch.load(PATH))

Once you’ve loaded the model, it’s ready for whatever you need it for -
more training, inference, or analysis.

Note that if your model has constructor parameters that affect model
structure, you’ll need to provide them and configure the model
identically to the state in which it was saved.

Other Resources
---------------

-  Docs on the `data
   utilities <https://pytorch.org/docs/stable/data.html>`__, including
   Dataset and DataLoader, at pytorch.org
-  A `note on the use of pinned
   memory <https://pytorch.org/docs/stable/notes/cuda.html#cuda-memory-pinning>`__
   for GPU training
-  Documentation on the datasets available in
   `TorchVision <https://pytorch.org/vision/stable/datasets.html>`__,
   `TorchText <https://pytorch.org/text/stable/datasets.html>`__, and
   `TorchAudio <https://pytorch.org/audio/stable/datasets.html>`__
-  Documentation on the `loss
   functions <https://pytorch.org/docs/stable/nn.html#loss-functions>`__
   available in PyTorch
-  Documentation on the `torch.optim
   package <https://pytorch.org/docs/stable/optim.html>`__, which
   includes optimizers and related tools, such as learning rate
   scheduling
-  A detailed `tutorial on saving and loading
   models <https://pytorch.org/tutorials/beginner/saving_loading_models.html>`__
-  The `Tutorials section of
   pytorch.org <https://pytorch.org/tutorials/>`__ contains tutorials on
   a broad variety of training tasks, including classification in
   different domains, generative adversarial networks, reinforcement
   learning, and more 



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 4 minutes  39.155 seconds)


.. _sphx_glr_download_beginner_introyt_trainingyt.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: trainingyt.py <trainingyt.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: trainingyt.ipynb <trainingyt.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
